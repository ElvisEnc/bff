version: '3'
services:

  backend:
    # Comando para buildear la imagen. Utiliza el Dockerfile indicado.
    build: .
    # Nombre de la imagen a utilizar. Si esta presente el comando build, construye una nueva imagen y le asigna este nombre.
    image: bg.bo.com/bff:latest
    environment:
      # Permite el debug remoto de la aplicacion.
      - JAVA_TOOL_OPTIONS=-agentlib:jdwp=transport=dt_socket,address=*:5005,server=y,suspend=n
    ports:
      - "8080:8080"
      - "5005:5005"
    env_file:
      - dev.env
    profiles: [ "debug", "dev" ]

  redis:
    image: "redis:alpine3.19"
    environment:
      - REDIS_PASSWORD=bff
    command: /bin/sh -c 'redis-server --appendonly yes --requirepass $${REDIS_PASSWORD}'
    ports:
      - "6379:6379"
    restart: always
    profiles: [ "debug", "dev" ]

  sonarqube:
    image: sonarqube:lts-community
    depends_on:
      - db
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://db:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    ports:
      - "9000:9000"
    profiles: [ "debug", "dev" ]

  db:
    image: postgres:12
    environment:
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    volumes:
      - postgresql:/var/lib/postgresql
      - postgresql_data:/var/lib/postgresql/data
    profiles: [ "debug", "dev" ]

volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  postgresql:
  postgresql_data: